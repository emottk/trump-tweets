<!DOCTYPE html>
<html>
  <head>
    <title>Istrumpmad</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Changa:400,800" rel="stylesheet">

    <style>

      .bar{
        fill: steelblue;
      }

      .bar:hover{
        fill: brown;
      }

    	.axis {
    	  font: 10px sans-serif;
        fill: steelblue;
    	}

    	.axis path,
    	.axis line {
    	  stroke: #000;
    	  shape-rendering: auto;
    	}

    </style>
  </head>

  <body>
    <%= yield %>


    <script>

    // set the dimensions of the canvas
    var dim = {width: 960, height: 500};
    var margin = {top: 10, bottom: 50, left: 50, right: 10};
    var inputHeight = 20;
    var numberFormat = d3.format('.0f');
    dim.graphWidth = dim.width - margin.left - margin.right;
    dim.graphHeight = dim.height - margin.top - margin.bottom;

    // Button shit
        // // listen for left and right arrow key press
        // d3.select('body').on('keydown',function()
        // {
        //   if (d3.event.which === 39)
        //   {
        //     next();
        //   }
        //   if (d3.event.which === 37)
        //   {
        //     prev();
        //   }
        // });


    // add the SVG element
    var svg = d3.select('body').append('svg')
      .attr({width: dim.width, height: dim.height})
      .style({margin:0,padding:0});

    // add axis
    var axisLayer = svg.append('g').attr('transform','translate(' + margin.left + ',' + margin.top + ')');
    var graphLayer = svg.append('g').attr('transform','translate(' + margin.left + ',' + margin.top + ')');
    var inputLayer = svg.append('g').attr('transform','translate(0,' + (dim.height - inputHeight) + ')');

    // set the ranges
    var xScale = d3.scale.ordinal().rangeBands([0,dim.graphWidth],0.05);
    var xLocalScale = d3.scale.ordinal();
    var yScale = d3.scale.ordinal().rangePoints([dim.graphHeight, 0]);
    var colorScale = d3.scale.category10();
    var inputScale = d3.scale.ordinal().rangeBands([0,dim.width-margin.right]);

    // define the axis
    var xAxis = d3.svg.axis().orient('bottom').scale(xScale);
    var yAxis = d3.svg.axis().orient('left').scale(yScale);

    //what is this axisLayer stuff?
    var xAxisObj = axisLayer.append('g')
      .attr('transform','translate('+0+','+dim.graphHeight+')')
      .attr('class','axis')
      .call(xAxis);
    var yAxisObj = axisLayer.append('g')
      .attr('transform','translate('+0 +','+0+')')
      .attr('class','axis')
      .call(yAxis);

    axisLayer.selectAll('.axis text').style('font','14px "Lucida Grande", Helvetica, Arial, sans-serif');
    axisLayer.selectAll('.axis path.domain').style({fill:'none',stroke:'#000000','shape-rendering':'crispEdges'});
    axisLayer.selectAll('.axis line').style({fill:'none',stroke:'#000000','shape-rendering':'crispEdges'});



    // transition function
    var time = 0;
    var yearLabel = 'year';
    var radius = 3;
    var mar = 0.6;
    var barWidth = 16;
    var displaydata = [];  // this is defined below. YAGNI?
    var years = [];

    var auto = true;

    var duration = 2000;
    var delayMax = 1000;

    // button shit
        // trans = function(to)
        // {
        //   if ( to === time || to < 0 || to >= years.length)
        //   {
        //     return;
        //   }
        //   var current = time;
        //   time = to;
        //   yearTarget = years[time];
        //   var votes = graphLayer.selectAll('.vote')
        //     .filter(function(d){return d[current].label!=d[time].label || d[current].idx!=d[time].idx;})
        //     .transition()
        //     .duration(duration)
        //     .delay(function(d){return Math.random()*delayMax;})
        //     .attr('cx',function(d){return ((d[time].label!=null)?(xScale(d[time].label)+xLocalScale(d[time].idx%barWidth)+radius+mar):(dim.graphWidth/2));})
        //     .attr('cy',function(d){return ((d[time].label!=null)?(yScale(Math.floor((d[time].idx+0.1)/barWidth))-radius-mar):0);})
        //     .style('opacity',function(d){return (d[time].label!=null)?0.8:0.0;})
        //     .style('fill',function(d){return colorScale(d[time].label);});
        //
        //   inputLayer.select('.cursor').transition().duration(duration/2)
        //     .attr('x',function(d){return inputScale(years[time]);});
        //   inputLayer.selectAll('.button text').transition().duration(duration/2)
        //     .style('fill',function(d,i){return (i===time)?'#FFF':'#000';})
        // } // end transition

    // button shit
        // // for left and right keypress
        // prev = function()
        // {
        //   trans(time-1);
        // }
        //
        // next = function()
        // {
        //   trans(time+1);
        // }


    // load the data
    d3.csv('data.csv', function(error,raw)
    {
      if (error != null)
      {
        console.log(error);
        return;
      }

      // structuring data
      // grab year values ie [0,1,2,3,4,5]
      years = d3.set(raw.map(function(d){return d[yearLabel];})).values();
      yearTarget = years[0];
      // grab letters ie [A,B,C,D,E]
      var parties = d3.keys(raw[0]).filter(function(d){return d !== yearLabel;});
      var partDict = {};
      // iterate over x values to format an object. why?
      parties.forEach(function(d,i)
      {
        partDict[d] = i;
      });
      // iterate over values to make data object with key of year and value of party
      // {0: Array(7), 1: Array(7), 2: Array(7), 3: Array(7), 4: Array(7), 5: Array(7)}
      // array has 7 data points for that year eg {0: [2,150,0,144,48,410,803]}
      var sums = {};
      var data = {};
      years.forEach(function(year){
        data[year] = parties.map(function(party){
          return +raw.filter( d => d[yearLabel] === year )

          [0][party] || 0;
        });
        // add all the values by year
        // {0: 1557, 1: 1594, 2: 1584, 3: 1482, 4: 1627, 5: 1680}
        sums[year] = d3.sum(data[year]);
      });

      // highest single data point ie 882
      var max = d3.max(years.map(function(d){return d3.max(data[d]);}));
      // number of horizontal rows/height of dots?
      var nrow = Math.ceil(dim.graphHeight/(2*(radius+mar)));
      // how wide should each bar be eg 15 dots
      barWidth = Math.ceil(max/nrow);
      // set graph characteristics based on above
      yScale.domain(d3.range(nrow));
        //tick labels for y axis
      yAxis.tickValues(d3.range(nrow).filter(function(d){return d%10===0;}));
      yAxis.tickFormat(function(d){return (d*barWidth);});
      // domain([0,1,2,3,4,5,6] sets the 6 columns
      xScale.domain(parties.map(function(d,i){return i;}));
      xAxis.tickFormat(function(d){return parties[d];});
      xAxisObj.call(xAxis);
      yAxisObj.call(yAxis);
      xLocalScale.rangeBands([0,xScale.rangeBand()]).domain(d3.range(barWidth));
      colorScale.domain(d3.range(parties.length));

      inputScale.domain(years);

      // button shit
              // // current button
              // var currentButton = inputLayer.append('rect')
              //   .attr('class','cursor')
              //   .attr({x:0,y:0,height:inputHeight,width:inputScale.rangeBand()}) //inputScale.rangeBand()
              //   .style('stroke','#FFF')
              //   .style('stroke-width',2)
              //   .style('fill','#000');
              //
              // // footer buttons to change data
              // var buttons = inputLayer.selectAll('.button').data(years).enter().append('g').attr('class','button')
              //   .attr('transform',function(d){return 'translate(' + inputScale(d) + ',' + 0 +')';})
              //   .on('click',function()
              //   {
              //     var s = d3.select(this);
              //     trans(years.indexOf(s.datum()));
              //   });
              // buttons.append('rect')
              //   .attr({x:0,y:0,height:inputHeight,width:inputScale.rangeBand()})
              //   .style('stroke','#FFF')
              //   .style('stroke-width',2)
              //   .style('fill','rgba(0,0,0,0.1)');
              // buttons.append('text')
              //   .text(function(d){return d;})
              //   .attr('x',function(d){return inputScale.rangeBand()/2;})
              //   .attr('y',0)
              //   .style('fill',function(d,i){return (i===0)?'#FFF':'#000';})
              //   .style('text-anchor','middle')
              //   .style('font',inputHeight+'px "Lucida Grande", Helvetica, Arial, sans-serif').style('dominant-baseline','text-before-edge');
              // // buttons end



      var summax = d3.max(years.map(function(d){return sums[d];}));
      var displaydata = d3.range(summax).map(function(d){return [];});
      var indexMargin = 0;
      parties.forEach(function(party,partyidx){
        for (var i=0;i<data[years[0]][partyidx];++i){
          displaydata[indexMargin+i].push({label:partyidx,idx:i});
        }
        indexMargin += data[years[0]][partyidx];
      });

      for (var i=indexMargin;i<summax;++i){
        displaydata[i].push({label:null,idx:null});
      }

      // button shit
          // // range
          // d3.range(1,years.length).forEach(function(idx){
          //   var year = years[idx];
          //   var lastyear = years[idx-1];
          //   var yearidx = idx;
          //   var pool = [];
          //   var unused = [];
          //   var keep = [];
          //
          //   displaydata.forEach(function(d,i)
          //   {
          //     var copy = {label:d[yearidx-1].label,idx:d[yearidx-1].idx};
          //     d.push(copy);
          //
          //     if ( d[yearidx].label == null){
          //       unused.push(i);
          //     } else {
          //       if (data[year][d[yearidx].label] <= d[yearidx].idx){
          //         pool.push(i);
          //       } else {
          //         keep.push(i);
          //       }
          //     }
          //   });
          //   d3.shuffle(pool);
          //   if ( sums[year] - sums[lastyear] > 0 )
          //   {
          //     pool = pool.concat(unused.splice(0,sums[year]-sums[lastyear]));
          //     d3.shuffle(pool);
          //   }
          //   else
          //   {
          //     pool.splice(sums[year]-keep.length).forEach(function(d)
          //     {
          //       displaydata[d][yearidx] = {label:null,idx:null};
          //     });
          //     pool = pool.splice(0,sums[year]-keep.length);
          //   }
          //   var poolmargin = 0;
          //   parties.forEach(function(party)
          //   {
          //     if (data[year][partDict[party]] - data[lastyear][partDict[party]] > 0)
          //     {
          //       for(var i=0;i<(data[year][partDict[party]]-data[lastyear][partDict[party]]);++i)
          //       {
          //         displaydata[pool[poolmargin+i]][yearidx] = {label:partDict[party],idx:i+data[lastyear][partDict[party]]};
          //       };
          //       poolmargin += data[year][partDict[party]]-data[lastyear][partDict[party]];
          //     }
          //   });
          // }); // end range


      // circles added to the dom
      var votes = graphLayer.selectAll('.vote').data(displaydata).enter().append('circle')
        .attr('class','vote')
        .attr('r',radius)
        .attr('cx',function(d){return ((d[time].label!=null)?(xScale(d[time].label)+xLocalScale(d[time].idx%barWidth)+radius+mar):(dim.graphWidth/2));})
        .attr('cy',function(d){return ((d[time].label!=null)?(yScale(Math.floor((d[time].idx+0.1)/barWidth))-radius-mar):0);})
        .style('opacity',function(d){return (d[time].label!=null)?0.8:0.0;})
        .style('fill',function(d){return colorScale(d[time].label);});
    }); // end load the data

    </script>








  </body>
</html>
